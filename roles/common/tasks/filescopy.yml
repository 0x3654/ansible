---
- name: Check if folder user exists
  ansible.builtin.getent:
    database: passwd
    key: "{{ folder_user }}"
  register: folder_user_exists
  failed_when: false

- name: Create folder user if not exists
  ansible.builtin.user:
    name: "{{ folder_user }}"
    state: present
    system: false
    create_home: true
    shell: /bin/bash
  when: folder_user_exists.ansible_facts.getent_passwd is not defined
  become: true
  register: folder_user_created

- name: Get folder user info (UID and GID)
  ansible.builtin.getent:
    database: passwd
    key: "{{ folder_user }}"
  register: folder_user_info
  when: folder_user_exists.ansible_facts.getent_passwd is defined or folder_user_created is changed

- name: Set folder user UID and GID variables
  ansible.builtin.set_fact:
    folder_user_uid: "{{ folder_user_info.ansible_facts.getent_passwd[folder_user][1] }}"
    folder_user_gid: "{{ folder_user_info.ansible_facts.getent_passwd[folder_user][2] }}"
  when: folder_user_info.ansible_facts.getent_passwd is defined


- name: Process files and directories
#  no_log: true
  block:
    - name: Create directories tree
      when: directory.state == 'directory'
      ansible.builtin.file:
        path: '{{ PWD }}/{{ directory.path }}'
        state: directory
        owner: '{{ ansible_user | d("root") }}'
        group: '{{ ansible_user | d("root") }}'
        mode: '{{ directory_mode }}'
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: directory
    
      notify:
      - '{{ down_handler_name }}'
      - '{{ up_handler_name }}'

    - name: Copy files
      when: 
        - file.state == 'file' 
        - not file.path.endswith('.DS_Store')
      ansible.builtin.template:
        src: '{{ file.src }}'
        dest: >-
          {{ PWD }}/{{ file.path }}
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: file
      notify:
        - '{{ down_handler_name }}'
        - '{{ up_handler_name }}'

    - name: Set files permissions
      when: 
        - file.state == 'file'
        - not file.path.endswith('.DS_Store')
      ansible.builtin.file:
        path: '{{ PWD }}/{{ file.path }}'
        owner: '{{ ansible_user | d("root") }}'
        group: '{{ ansible_user | d("root") }}'
        mode: '{{ file.mode | d(file_mode) }}'
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: file
      notify:
        - '{{ down_handler_name }}'
        - '{{ up_handler_name }}'

  tags: [files_copy]
      
- name: Force handlers to run
  meta: flush_handlers
  tags: [files_copy]