---
- name: Check if docker user exists
  ansible.builtin.getent:
    database: passwd
    key: "{{ docker_user }}"
  register: docker_user_exists
  failed_when: false

- name: Create docker user if not exists
  ansible.builtin.user:
    name: "{{ docker_user }}"
    state: present
    system: false
    create_home: true
    shell: /bin/bash
  when: docker_user_exists.ansible_facts.getent_passwd is not defined
  become: true
  register: docker_user_created

- name: Get docker user info (UID and GID)
  ansible.builtin.getent:
    database: passwd
    key: "{{ docker_user }}"
  register: docker_user_info
  when: docker_user_exists.ansible_facts.getent_passwd is defined or docker_user_created is changed

- name: Set docker user UID and GID variables
  ansible.builtin.set_fact:
    docker_user_uid: "{{ docker_user_info.ansible_facts.getent_passwd[docker_user][1] }}"
    docker_user_gid: "{{ docker_user_info.ansible_facts.getent_passwd[docker_user][2] }}"
  when: docker_user_info.ansible_facts.getent_passwd is defined


- name: Process files and directories
  no_log: true
  block:
    - name: Create directories tree
      when: directory.state == 'directory'
      ansible.builtin.file:
        path: '{{ PWD }}/{{ directory.path }}'
        state: directory
        owner: '{{ docker_user | d(ansible_user | d("root")) }}'
        group: '{{ docker_user | d(ansible_user | d("root")) }}'
        mode: '{{ directory_mode }}'
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: directory
    
      notify:
      - '{{ down_handler_name }}'
      - '{{ up_handler_name }}'

    - name: Copy files
      when: file.state == 'file' and not file.path.endswith('.DS_Store')
      ansible.builtin.template:
        src: '{{ file.src }}'
        dest: '{{ PWD }}/{{ file.path }}'
 #       force: no
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: file
      notify:
      - '{{ down_handler_name }}'
      - '{{ up_handler_name }}'

    - name: Set files permissions
      when: 
        - file.state == 'file'
        - not file.path.endswith('.DS_Store')
      ansible.builtin.file:
        path: '{{ PWD }}/{{ file.path }}'
        owner: '{{ docker_user | d(ansible_user | d("root")) }}'
        group: '{{ docker_user | d(ansible_user | d("root")) }}'
        mode: '{{ file.mode | d(file_mode) }}'
      with_community.general.filetree: '{{ files_source_dir | default("files/") }}'
      loop_control:
        loop_var: file
      notify:
      - '{{ down_handler_name }}'
      - '{{ up_handler_name }}'

    - name: Set permissions on host media folders
      when: homelab_media_binds is defined    
      ansible.builtin.file:
        path: "{{ folder.split(':')[0] }}"
        owner: "{{ docker_user | d(ansible_user | d('root')) }}"
        group: "{{ docker_user | d(ansible_user | d('root')) }}"
        mode: '{{ file.mode | d(file_mode) }}'
        recurse: yes
      loop: "{{ homelab_media_binds }}"
      loop_control:
        loop_var: folder
  
  

  tags: [files_copy]
      
- name: Force handlers to run
  meta: flush_handlers
  tags: [files_copy]