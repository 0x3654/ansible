- name: SSL Certificate Management
  block:
    - name: SSL Check if certificate already exists
      stat:
        path: "{{ cert_path }}/live/{{ domain_name }}/fullchain.pem"
      register: ssl_cert_exists

    - name: Check if certificate exists and is not empty
      set_fact:
        ssl_cert_valid: "{{ ssl_cert_exists.stat.exists and ssl_cert_exists.stat.size > 0 }}"

    - name: Check certificate expiration date
      when: ssl_cert_valid
      shell: openssl x509 -in {{ cert_path }}/live/{{ domain_name }}/fullchain.pem -noout -enddate | cut -d= -f2
      register: cert_expiration
      changed_when: false

    - name: Convert expiration date to timestamp
      when: ssl_cert_valid and cert_expiration is defined and cert_expiration.stdout is defined
      shell: date -d "{{ cert_expiration.stdout }}" +%s
      register: expiration_timestamp
      
      ignore_errors: true
      changed_when: false

    - name: Get current timestamp
      when: ssl_cert_valid and expiration_timestamp is defined and expiration_timestamp.stdout is defined
      shell: date +%s
      register: current_timestamp
      changed_when: false

    - name: Calculate days until expiration
      when: ssl_cert_valid and expiration_timestamp is defined and expiration_timestamp.stdout is defined and current_timestamp is defined and current_timestamp.stdout is defined
      set_fact:
        days_until_expiration: "{{ ((expiration_timestamp.stdout|int - current_timestamp.stdout|int) / 86400) | int }}"
      

    - name: Set certificate needs renewal flag
      when: ssl_cert_valid
      set_fact:
        cert_needs_renewal: "{{ not ssl_cert_valid or (days_until_expiration is defined and days_until_expiration | int <= 30) }}"
      

- name: SSL Certificate Management only when SSL certificate not exists or invalid
  when: not ssl_cert_exists.stat.exists or not ssl_cert_valid or cert_needs_renewal
  block:
    - name: Temporarily open port 80 for certbot
      include_tasks: ../../../common/tasks/firewall.yml
      vars:
        required_rules:
          - "-A INPUT -p tcp --dport 80 -j ACCEPT"

    - name: Run certbot to obtain certificate
      shell: certbot certonly --standalone --config-dir {{ cert_path }}/ --work-dir {{ cert_path }}/ -d {{ domain_name }} --non-interactive --agree-tos --register-unsafely-without-email -v
      register: certbot_result
      failed_when: certbot_result.rc != 0

    - name: Close port 80 after certbot
      include_tasks: ../../../common/tasks/firewall.yml
      vars:
        prohibited_rules:
          - "-A INPUT -p tcp --dport 80 -j ACCEPT"
  notify: 
    - '{{ down_handler_name }}'
    - '{{ up_handler_name }}'
  tags: [ssl]
